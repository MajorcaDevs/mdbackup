{
  "definitions": {},
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/root.json",
  "type": "object",
  "title": "Configuration file schema",
  "required": [
    "backupsPath",
    "env"
  ],
  "properties": {
    "backupsPath": {
      "$id": "#/properties/backupsPath",
      "type": "string",
      "title": "Folder where the backups will be located",
      "default": "",
      "examples": [
        "/backups"
      ],
      "pattern": "^(.*)$"
    },
    "customUtilsScript": {
      "$id": "#/properties/customUtilsScript",
      "type": "string",
      "title": "If defined, this file will be included in the execution of all the step scripts",
      "default": "",
      "examples": [
        "my.utils.sh",
        "/opt/backups/custom.utils.sh"
      ],
      "pattern": "^(.*)\\.sh$"
    },
    "logLevel": {
      "$id": "#/properties/logLevel",
      "type": "string",
      "enum": [
        "CRITICAL",
        "ERROR",
        "WARNING",
        "INFO",
        "DEBUG"
      ],
      "title": "If defined, modifies the log level of the utility"
    },
    "maxBackupsKept": {
      "$id": "#/properties/maxBackupsKept",
      "type": "number",
      "title": "Defines the maximum count of backups to be kept"
    },
    "env": {
      "$id": "#/properties/env",
      "type": "object",
      "title": "Environment variables that will be passed to the scripts, includes predefined configurations available for configuring scripts",
      "properties": {
        "docker": {
          "$id": "#/properties/env/properties/docker",
          "type": "string",
          "title": "If set, will use docker instead of native apps in some utilities",
          "default": "",
          "examples": [
            "true"
          ],
          "pattern": "^(.*)$"
        },
        "pgnetwork": {
          "$id": "#/properties/env/properties/pgnetwork",
          "type": "string",
          "title": "[Docker] Defines which network will use to connect to the database",
          "default": "host",
          "examples": [
            "host",
            "databases_net"
          ],
          "pattern": "^(.*)$"
        },
        "pgimage": {
          "$id": "#/properties/env/properties/pgimage",
          "type": "string",
          "title": "[Docker] Defines which image will use to run the container",
          "default": "postgres",
          "examples": [
            "postgres",
            "postgres:alpine",
            "timescale/timescaledb:latest-pg10"
          ],
          "pattern": "^(.*)$"
        },
        "pghost": {
          "$id": "#/properties/env/properties/pghost",
          "type": "string",
          "title": "The host of the database",
          "default": "localhost",
          "examples": [
            "127.0.0.1"
          ],
          "pattern": "^(.*)$"
        },
        "pguser": {
          "$id": "#/properties/env/properties/pguser",
          "type": "string",
          "title": "The user to connect in the database (must exist)",
          "default": "postgres",
          "examples": [
            "postgres"
          ],
          "pattern": "^(.*)$"
        },
        "pgpassword": {
          "$id": "#/properties/env/properties/pgpassword",
          "type": "string",
          "title": "If set, will use this as password for connecting to the database",
          "default": "",
          "examples": [
            ""
          ],
          "pattern": "^(.*)$"
        },
        "mysqlnetwork": {
          "$id": "#/properties/env/properties/mysqlnetwork",
          "type": "string",
          "title": "[Docker] Defines which network will use to connect to the database",
          "default": "host",
          "examples": [
            "host",
            "databases-net"
          ],
          "pattern": "^(.*)$"
        },
        "mysqlimage": {
          "$id": "#/properties/env/properties/mysqlimage",
          "type": "string",
          "title": "[Docker] Defines which image will use to run the container",
          "default": "mariadb",
          "examples": [
            "mysql",
            "mariadb"
          ],
          "pattern": "^(.*)$"
        },
        "mysqlhost": {
          "$id": "#/properties/env/properties/mysqlhost",
          "type": "string",
          "title": "The host of the database",
          "default": "localhost",
          "examples": [
            "127.0.0.1"
          ],
          "pattern": "^(.*)$"
        },
        "mysqluser": {
          "$id": "#/properties/env/properties/mysqluser",
          "type": "string",
          "title": "The username to connect to the database",
          "default": "",
          "examples": [
            "root"
          ],
          "pattern": "^(.*)$"
        },
        "mysqlpassword": {
          "$id": "#/properties/env/properties/mysqlpassword",
          "type": "string",
          "title": "If defined, sets the password which will be used to connect to the database",
          "default": "",
          "examples": [
            ""
          ],
          "pattern": "^(.*)$"
        }
      },
      "required": []
    },
    "secrets": {
      "$id": "#/properties/secrets",
      "type": "object",
      "title": "Configure alternative ways to populate the environment from more secure sources",
      "properties": {
        "file": {
          "$id": "#/properties/secrets/properties/file",
          "type": "object",
          "title": "File secrets backend",
          "required": [
            "env",
            "config"
          ],
          "properties": {
            "env": {
              "$id": "#/properties/secrets/properties/file/properties/env",
              "type": "object",
              "title": "Every property inside the object will be filled with the contents of the file"
            },
            "config": {
              "$id": "#/properties/secrets/properties/file/properties/config",
              "type": "object",
              "title": "Configuration of the file secrets backend",
              "properties": {
                "basePath": {
                  "$id": "#/properties/secrets/properties/file/properties/config/properties/basePath",
                  "type": "string",
                  "title": "Absolute path to be used as base to resolve relative paths in 'env'",
                  "pattern": "^/([^/]+/)*$"
                }
              }
            },
            "providers": {
              "$id": "#/properties/secrets/properties/file/properties/providers",
              "type": "array",
              "title": "Configure cloud storage providers from json files",
              "examples": [
                [ "secret/backups/providers/digitalocean", "secret/backups/providers/backblaze" ]
              ]
            }
          }
        },
        "vault": {
          "$id": "#/properties/secrets/properties/vault",
          "type": "object",
          "title": "File secrets backend",
          "required": [
            "config"
          ],
          "properties": {
            "env": {
              "$id": "#/properties/secrets/properties/vault/properties/env",
              "type": "object",
              "title": "Every property inside the object will be filled with the contents of the Vault secret"
            },
            "config": {
              "$id": "#/properties/secrets/properties/vault/properties/config",
              "type": "object",
              "title": "Configuration of the file secrets backend",
              "required": [
                "apiBaseUrl",
                "roleId",
                "secretId"
              ],
              "properties": {
                "apiBaseUrl": {
                  "$id": "#/properties/secrets/properties/vault/properties/config/properties/apiBaseUrl",
                  "type": "string",
                  "title": "URL to the base Vault API",
                  "pattern": "^https?://.*[^/]$",
                  "examples": ["http://localhsot:8200"]
                },
                "roleId": {
                  "$id": "#/properties/secrets/properties/vault/properties/config/properties/roleId",
                  "type": "string",
                  "title": "Role ID of the AppAuth login"
                },
                "secretId": {
                  "$id": "#/properties/secrets/properties/vault/properties/config/properties/secretId",
                  "type": "string",
                  "title": "Secret ID of the AppAuth login"
                },
                "cert": {
                  "$id": "#/properties/secrets/properties/vault/properties/config/properties/cert",
                  "type": ["string", "boolean"],
                  "title": "Path to a certificate bundle. If set to false, disables TLS certificate verification"
                }
              }
            },
            "providers": {
              "$id": "#/properties/secrets/properties/vault/properties/providers",
              "type": "array",
              "title": "Configure cloud storage providers securely from Vault",
              "examples": [
                [ "secret/backups/providers/digitalocean", "secret/backups/providers/backblaze" ]
              ]
            }
          }
        }
      }
    },
    "compression": {
      "$id": "#/properties/compression",
      "type": ["object", "null"],
      "title": "Configures the compression of things",
      "required": [
        "strategy"
      ],
      "properties": {
        "strategy": {
          "$id": "#/properties/compression/properties/strategy",
          "type": "string",
          "title": "Selects the compression strategy",
          "default": "gzip",
          "enum": [
            "gzip",
            "xz"
          ]
        },
        "level": {
          "$id": "#/properties/compression/properties/level",
          "type": "number",
          "title": "Selects the compression level",
          "default": 5,
          "enum": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
        }
      }
    },
    "cypher": {
      "$id": "#/properties/cypher",
      "type": ["object", "null"],
      "title": "Configures the cypher strategy to use",
      "required": [
        "strategy"
      ],
      "properties": {
        "strategy": {
          "$id": "#/properties/cypher/properties/strategy",
          "type": "string",
          "title": "Selects the cypher strategy to follow",
          "default": null,
          "enum": [
            "gpg-passphrase",
            "gpg-keys"
          ]
        },
        "passphrase": {
          "$id": "#/properties/cypher/properties/passphrase",
          "type": ["string", "null"],
          "title": "For a strategy requiring one, uses this as cypher passphrase (symmetric cypher)",
          "default": null,
          "examples": [
            "Ap0werful[passw@rd]"
          ],
          "pattern": "^(.*)$"
        },
        "keys": {
          "$id": "#/properties/cypher/properties/keys",
          "type": "array",
          "title": "For a strategy requiring one, uses the list items as keys to cypher (asymmetric cypher)",
          "examples": [
            [ "melchor9000@gmail.com" ]
          ],
          "items": {
            "$id": "#/properties/cypher/properties/keys/items",
            "type": "string",
            "pattern": "^(.+@.+\\..+)$"
          }
        },
        "algorithm": {
          "$id": "#/properties/cypher/properties/algorithm",
          "type": ["string", "null"],
          "title": "Define the cypher algorithm to use in the process",
          "examples": [
            "CAMELLIA256",
            "AES256",
            "AES192"
          ]
        }
      }
    },
    "providers": {
      "$id": "#/properties/providers",
      "type": "array",
      "title": "Configuration for storage providers in the cloud.",
      "required": [],
      "items": {
        "$id": "#/properties/providers/items",
        "type": "object",
        "title": "Enables upload backups to Google Drive. Sets configurations for the storage provider.",
        "required": [
          "type",
          "backupsPath"
        ],
        "properties": {
          "type": {
            "$id": "#/properties/providers/items/properties/type",
            "type": "string",
            "enum": [
              "gdrive",
              "s3",
              "b2",
              "ftp",
              "ftps"
            ],
            "title": "Provider type",
            "default": ""
          },
          "backupsPath": {
            "$id": "#/properties/gdrive/properties/backupsPath",
            "type": "string",
            "title": "Where to store the files in Google Drive (must exist)",
            "default": "",
            "examples": [
              "/Backups"
            ],
            "pattern": "^/(.*)$"
          }
        }
      }
    },
    "hooks": {
      "$id": "#/properties/hooks",
      "type": "object",
      "title": "Run scripts or one-liner scripts before or after things occur",
      "properties": {
        "backup:before": {
          "$id": "#/properties/hooks/properties/backup:before",
          "type": "string",
          "title": "Run the script when the backup is going to be done"
        },
        "backup:after": {
          "$id": "#/properties/hooks/properties/backup:after",
          "type": "string",
          "title": "Run the script when the backup is done, but before uploading it"
        },
        "backup:error": {
          "$id": "#/properties/hooks/properties/backup:error",
          "type": "string",
          "title": "Run the script when the backup has failed for some reason"
        },
        "upload:before": {
          "$id": "#/properties/hooks/properties/upload:before",
          "type": "string",
          "title": "Run the script when the backup is going to be uploaded using one provider"
        },
        "upload:after": {
          "$id": "#/properties/hooks/properties/upload:after",
          "type": "string",
          "title": "Run the script when the backup have been uploaded using one provider"
        },
        "upload:error": {
          "$id": "#/properties/hooks/properties/upload:error",
          "type": "string",
          "title": "Run the script when the backup could not be uploaded using one provider"
        },
        "oldBackup:deleting": {
          "$id": "#/properties/hooks/properties/oldBackup:deleting",
          "type": "string",
          "title": "Run the script when an old backup is going to be deleted"
        },
        "oldBackup:deleted": {
          "$id": "#/properties/hooks/properties/oldBackup:deleted",
          "type": "string",
          "title": "Run the script when an old backup is already deleted"
        },
        "oldBackup:error": {
          "$id": "#/properties/hooks/properties/oldBackup:error",
          "type": "string",
          "title": "Run the script when an old backup failed when it was being deleted"
        }
      }
    }
  }
}