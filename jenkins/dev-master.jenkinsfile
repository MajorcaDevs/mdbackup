@Library('jenkings') _

def generateImageName(arch, flavour) {
  return "majorcadevs/mdbackup:${GIT_TAG}-${arch}-${flavour}"
}

def arches = ['amd64', 'arm64v8', 'arm32v7']
def flavours = ['alpine', 'slim']

pipeline {
  agent {
    label '!docker-qemu'
  }

  environment {
    CI = 'true'
    GIT_TAG = ''
    IS_DRAFT = false
  }

  stages {
    stage('Get git tag') {
      steps {
        script {
          GIT_TAG = sh(script: 'git tag -l --contains HEAD', returnStdout: true).trim()
          if(GIT_TAG == '') {
            GIT_TAG = null
            echo 'No tag detected'
          } else {
            IS_DRAFT = GIT_TAG.matches('v?\\d+\\.\\d+\\.\\d+-.+')
            echo "Tag detected: ${GIT_TAG} - is draft? ${IS_DRAFT}"
            if(env.BRANCH_NAME.matches('master|dev')) {
              echo 'A release will be published'
            }
          }
        }
      }
    }

    stage('Build wheel') {
      agent {
        docker {
          label 'docker'
          image 'python:3.7-buster'
          args '-e HOME=$WORKSPACE -e PATH=$PATH:$WORKSPACE/.local/bin'
        }
      }

      steps {
        script {
          sh 'python setup.py bdist_wheel'
          dir('dist') {
            archiveArtifacts artifacts: 'mdbackup-*.whl', fingerprint: true
          }
        }
      }
    }

    stage('Build docs') {
      agent {
        dockerfile {
          label 'docker'
          filename 'docs/docker/Dockerfile.jenkins'
          args '-e HOME=$WORKSPACE -e PATH=$PATH:$WORKSPACE/.local/bin'
        }
      }

      environment {
        HOMEPAGE_URL = 'https://mdbackup.majorcadevs.com'
      }

      steps {
        script {
          sh './docs/docker/versioning-build.sh'
          if(env.HOMEPAGE_URL.indexOf('github.io') == -1) {
            def domain = (env.HOMEPAGE_URL =~ /^https?:\/\/([^\/]+)/)[0][1]
            sh "echo ${domain} > build/docs/CNAME"
          }

          withCredentials([
            usernamePassword(credentialsId: 'GitHub-melchor629',
                             usernameVariable: 'GIT_USERNAME',
                             passwordVariable: 'GIT_PASSWORD')
          ]) {
            sh 'git config user.name "melchor629"'
            sh 'git config user.email "melchor9000@gmail.com"'
            sh 'git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/MajorcaDevs/mdbackup'
            sh 'npx gh-pages -d build/docs'
          }
        }
      }
    }

    stage('Build images') {
      when {
        expression {
          GIT_TAG != null && GIT_TAG != ''
        }
      }

      steps {
        script {
          def builders = [:]

          for(arch in arches) {
            for(flavour in flavours) {
              // the label of the parallel branch
              def label = "${arch}-${flavour}"
              // loop variables are not available inside stages
              def ctx = ['arch': arch, 'flavour': flavour]
              // the key is the name of parallel branch
              builders[label] = {
                node('docker-qemu') {
                  stage('build image') {
                    script {
                      def imageName = generateImageName(ctx['arch'], ctx['flavour'])
                      docker.build(imageName, "--pull --build-arg ARCH=${ctx['arch']} -f docker/Dockerfile-${ctx['flavour']} .")
                    }
                  }

                  stage('push image') {
                    script {
                      docker.withRegistry('https://registry.hub.docker.com', 'bobthabuilda') {
                        def imageName = generateImageName(ctx['arch'], ctx['flavour'])
                        def img = docker.image(imageName)
                        img.push("${GIT_TAG}-${ctx['arch']}-${ctx['flavour']}")
                      }
                    }
                  }
                }
              }
            }
          }

          parallel builders
        }
      }
    }

    stage('Update manifest') {
      when {
        expression {
          GIT_TAG != null && GIT_TAG != ''
        }
      }

      agent {
        label 'docker-qemu'
      }

      steps {
        script {
          def images = [:]

          flavours.each { flavour ->
            images[flavour] = arches
              .collect { arch -> generateImageName(arch, flavour) }
          }

          images.each { flavour, imgs ->
            docker.withRegistry('', 'bobthabuilda') {
              dockerManifest("majorcadevs/mdbackup:${GIT_TAG}-${flavour}", imgs)
              if(env.BRANCH_NAME == 'master') {
                dockerManifest("majorcadevs/mdbackup:${flavour}", imgs)
              }
            }
          }
        }
      }
    }

    stage('Create Github release') {
      when {
        expression {
          GIT_TAG != null && GIT_TAG != ''
        }
      }

      agent {
        label 'majorcadevs'
      }

      steps {
        script {
          unarchive mapping: ['*.whl': '.']
          def file = sh(script: 'ls *.whl', returnStdout: true).trim()
          githubRelease(
            'amgxv-github-token',
            'majorcadevs/mdbackup',
            "${GIT_TAG}".toString(),
            "Release ${GIT_TAG}".toString(),
            'TBD',
            [
              [file, 'application/octet-stream'],
            ],
            IS_DRAFT && IS_DRAFT == 'true'
          )
        }
      }
    }

    stage('Create pypi release') {
      when {
        expression {
          GIT_TAG != null && GIT_TAG != ''
        }
      }

      agent {
        docker {
          label 'docker'
          image 'python:3.7-buster'
          args '-e HOME=$WORKSPACE -e PATH=$PATH:$WORKSPACE/.local/bin'
        }
      }

      steps {
        script {
          withCredentials([
            usernamePassword(credentialsId: 'pypi-majorcadevs',
                             usernameVariable: 'PYPI_USER',
                             passwordVariable: 'PYPI_PASS')
            ])
          {
            sh "pip install --user twine"
            sh "python setup.py sdist bdist_wheel"
            sh "twine upload --user ${PYPI_USER} --password ${PYPI_PASS} dist/*"
          }
        }
      }
    }
  }
}
